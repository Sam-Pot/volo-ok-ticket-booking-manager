syntax = "proto3";
package ticketBookingManager;

service BookingService {
  rpc saveOrUpdate(Booking) returns (Booking) {};
  rpc delete (BookingDto) returns (Booking) {};
  rpc find(PaginateQueryDto) returns (PaginatedBookings) {};
  rpc findOne(BookingDto) returns (Booking) {};
}

service TicketService {
  rpc saveOrUpdate(Ticket) returns (Ticket) {};
  rpc generateTicket(TicketDto) returns (EmailDto) {};
  rpc findOne(TicketDto) returns (Ticket) {};
  rpc find(PaginateQueryDto) returns (PaginatedTickets) {};
  rpc findAllByUser(IdDto) returns (PaginatedTickets) {};
  rpc delete (TicketDto) returns (Ticket) {};
  rpc countTickets(CountDto) returns (TicketsNumber) {};
}

message Booking {
  string id = 1;               // ticket booking microservice
  BookingState state = 2;      // ticket booking microservice
  uint64 expirationDate = 3;   // ticket booking microservice
  string userId = 4;           // user
  repeated Ticket tickets = 5; // user
}

message Ticket {
  string id = 1;               // user
  string passengerName = 2;    // user
  string passengerSurname = 3; // user
  string fareId = 4;           // user
  string customerCode = 5;     // user
  float price = 6;             // api gateway
  uint32 generatedPoints = 7;  // api gateway
  uint32 usedPoints = 8;       // user
  string flightId = 9;         // user
  TicketState state = 10;      // api gateway
  uint64 flightDate = 11;      // user
  string bookingId = 12;       // booking microservice
  string userId = 13;          // user
  string from = 14;            // user
  string to = 15;              // user
}

enum BookingState {
  EMPTY = 0;
  OPEN = 1;      // microservice
  CONFIRMED = 2; // api-gateway
  EXPIRED = 3;   // api-gateway scheduler
}

enum TicketState {
  VOID = 0;
  BOOKED = 1;    // microservice
  PURCHASED = 2; // api-gateway
}

message BookingDto {
  string bookingId = 1;
  string userId = 2;
}

message TicketDto {
  string ticketId = 1;
  string userId = 2;
  string userEmail = 3;
}

message PaginateQueryDto { string query = 1; }

message PaginatedBookings {
  uint32 elementsNumber = 1;
  repeated Booking bookings = 2;
}

message PaginatedTickets {
  uint32 elementsNumber = 1;
  repeated Ticket tickets = 2;
}

message EmailDto {
  string to = 1;
  string subject = 2;
  string text = 3;
  string html = 4;
}

message CountDto {
  string flightId = 1;
  uint64 departureDate = 2;
}

message TicketsNumber { uint32 numberOfTickets = 1; }

message IdDto {string id = 1;}